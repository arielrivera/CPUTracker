Ok, I'm ready to focus on the Main , or home, section of the page.

The Main/home area or tab interface page has 2 sections a top section and a bottom section , for now lets focus on the top section, the bottom sectio nwe can do later, for now the table in the home are we'll move down a little to make room to the top section which should be as follows:

1- A top section we'll call top topbar where we have the following controls in horizontal form, or inline fashion :

- Mode toggle, a toggle to similar to iOS toggles, to toggle between search mode or input mode.
  Search mode should be default mode when the web app is loaded.
  When toggled to input mode, the app adds records to the database. When in search mode the app searches the database.
- A search box mostly intended to search for a serial number, but also a part number can be searched or a combination of serial number and part number can be ebtered to do a search in the SQLite database. The search box accepts searches for partial serial numbers.
  The search box has to detect whether the user is searching for the following 3 cases:
  I- A serial number, either a full serial or partial serial number, this string can identified if the string does not contain a dash or an underscore. Be mindfull that only alphanumberic characters , undersocre and dash are accepted in the search box.
  II- A part number, this can be identified by a string that contains only a single dash and no underscore.
  III- A special string that contains the serial number and the part number separated by an underscore, here is an example "9KQ5064X20158_100-000000346" , where the first part of the string is the serial number and the second part is the part number. When a special string like this is entered and the focus is lost from the search box the app has to attempt deconstructing the string, leave the serial number part in the search box, try to identify the part number and autoselect it in the part number drop down , if not found

        - A Dropdown where to show all the different part numbers. Should have always a top option and defaulted as "Any". If the toggle is in input mode, and the dropdown is set to "Any" in case it was not set or auto identified, should be set to "100-000000000"; if we're in search mode then when searcing in the database then and the droopdown is ANY then the query should look for any in the part number field.

        - A Search button . This search button changes its legend from "Search" in the default color to "Add" in red color, depending on the mode it's set with the toggle.







        Lets create a function for when the string in the searchbox detects an underscore on the blur event as follows:
        Lets call the function deconstructSearchString()
        If the underscore is detected then we call this new function that will attempt to deconstruct the string and leave the serial number, which is the part to the right of the underscore, in the search box and try to identify the part number, which is to the left of the underscore,  and select it in the dropdown.
        If the part number is not found in the dropwdown then the dropdown should be set to it's default value "Any"


        ---



        =---  SEARCH Mode

            - ENTER or CLICK on the search button
                --if regultar string , call SEARCH TOUTE
                -- if Special string, call deconstructSearchString , deconstructSearchString should call SEARCH ROUTE


       =--  ADD Mode
            - ENTER or CLICK on the ADD button
                -- if regular string, call ADD ROUTE
                -- if Special string, call deconstructSearchString, deconstructSearchString should call ADD ROUTE

        -




        I need to implement pagination in home.html  search results table.
        - The table should show a max of 100 rows per page, and the user should be able to navigate through the pages with a pagination control at the bottom of the table.
        - The table should show the total number of rows found in the search query, and the number of pages.
        - The table should show the current page number and the total number of pages.



         Lets now focus on adding functionality to the search results page in home.html.
        1- I want to be able to edit the fields serial number, part number, datecode,country and result  in the search results table.
        If I double click on any of these 5 I should get a modal with a form to edit these 5 field at teh same time.
            --Serial number should be an input box to type manually , it should only accept alphanumeric characters.
            --Part number shuld be the exact same dropdown as in the search form.
            --datecode should be an input box to type manually but implement something where as the user types it suggests other datecodes in the database that match the string typed so far, based in the distinct datecode field in the units table.
            --Country should be a dropdown with these countries: Malaysia, China, USA.
            --Result should be a dropdown with these options: Pass (NFF), Fail (VF), Scrap (VM/PPS), Unknown.
        2- There should be a button to save the changes in the modal form, and a button to cancel the changes.
            -- When the save button is clicked we need to show a spinner while the changes are being saved to the database, and then show a message that the changes were saved successfully if so.
            -- If the changes were not saved successfully we need to show a message that the changes were not saved and why. For example, the serial number field has unique constraint so we should catch any failures like that and warn the user if so happens or any other errors.
            -- When the cancel button is clicked we need to close the modal and not save any changes but warn the user, if there are unsaved changes, that the changes were not saved.
            -- When the modal is closed we need to warn the user if there are unsaved changes that the changes were not saved.
        3- There should be a button "Show test logs" that when clicked shows a separate modal with a table of the test logs telated to the LOGS table but will define this later, we'll come back to this later.
            The table should show the html table taht we'll define later.
            The table should have a button to close the modal.


            ------------

The LOGS section interface page works as follows:
1- This is to control a process that runs in the background. The user can launch and stop the process at will , tHe user should have the option to run the process in two ways, "All files" or "New files only" which is default. WHen the process is started we should show a spinner to the user to wait for the process to finish. THe process should provide detailed output of its progresss as it runs, start, reading which file, etc. because we will be showing this in an area of the LOGS sextion.

        THe python process has this functionality:
            The process has to have features so that is not run multiple times, only once at a time.
            The process checks for the mounted "LOGS FOLDER" to access  compressed files with 7z commpression.

            THe process , in "New files only" mode, checks for the latest modified file ".7z" , grabs the name of it ignoring the extension and the dot before de extension, so it only grabs the name of the file without extension and the dot. If the filename does not exist in teh database then it adds a record in the LOGs table for it. THen it continues for the next file in descending order until it finds a file that is already in the table so then the process is stopped.

            The process, in the "All files" mode, does the same but for all of the ".7z" files in the folder until is finished or stopped byt the user. But in this mode the program shouold list all the LOGS FODLER files and load that list in an array ,all the filenames and created time  , then do the process iterating the array instead of checking each file at a time.

            This python process, regardless of in which mode is running, when it finds a new file that can be added to the database, then also stores a record in the AUDIT table for the serial_number that belongs to the file.
            Here is a sample name for these compressed files : "100-000000334_9KC4399M10022_000000_AMD-HC-OSV-A003_LRV_20231020_104543.7z"

            This process, when it has a file that can be added, will deal with the compressed .7z files as follows:
                - create a temp folder if not already created by the process already.
                - copy the file to the temp folder
                - make sure the original compressed file is not affected in any way.
                - Analyze the newly copied file name as follows to determine if its valid and we can obtain the serial number from it as follows:
                    I- Make sure the file name starts with a pattern as "XXX-XXXXXXXXX_*_" where the X represent any character, and the * represents anything but not a null string, what we're looking for is the serial number and it should be contained in between the first two underscores of the file name where we're using the * as pattern. If not a valid file then delete this temp file from the temp folder and move on to the next file.
                    II- Store the extracted serial number string in a variable, show it in the process output.

                If we know the file is valid and we have succsessfully extracted the serial number then :
                    - unzip the file to a subfolder inside to the temp folder
                    - among the uncompressed files in the new subfolder it should search for two files:
                        1- a file called "Host_Status.txt". If found, read the text contents of it to a variable to store in the database.
                        2- a csv file with a name which starts with the serial number followed by an underscore and more charactes after the underscore. If found we store the name of this file and also the contents of this file , since its a csv we need to store the data in a serialized manner to to then store it in the database.
                    - Store the data we have collected to the database, serialnumber , and if available host_status and csv_file_name and csv_file_content to the LOGS database.
                    - delete the files in the sub folder
                    - delete the sub folder
                    - continiue to next file
                    - remember to always show progress for each step as it goes


                - If not more files to process then delete the  temp folder
